name: Upload Binaries

on:
  release:
    types: [created]

jobs:
  publish:
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        compiler:
          - cc: clang
            cxx: clang++
            mode: release
            assert: OFF
            shared: OFF
    runs-on: ${{ matrix.os }}
    steps:
      - name: Configure Environment
        run: echo "$GITHUB_WORKSPACE/llvm/install/bin" >> $GITHUB_PATH

      # Clone the CIRCT repo and its submodules. Do shallow clone to save clone
      # time.
      - name: Get CIRCT
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
          submodules: "true"

      # --------
      # Restore LLVM from cache and build if it's not in there.
      # --------

      # Extract the LLVM submodule hash for use in the cache key.
      - name: Get LLVM Hash
        id: get-llvm-hash
        run: echo "::set-output name=hash::$(git rev-parse @:./llvm)"

      - name: Get workflow spec hash
        id: get-workflow-hash
        run: echo "::set-output name=hash::$(md5sum $GITHUB_WORKSPACE/.github/workflows/uploadBinaries.yml | awk '{print $1}')"

      # Try to fetch LLVM from the cache.
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: |
            llvm/build
            llvm/install
          key: ${{ matrix.os }}-llvm-${{ steps.get-llvm-hash.outputs.hash }}-${{ steps.get-workflow-hash.outputs.hash }}-${{ matrix.compiler.cc }} 

      - name: Setup Ninja Linux
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install ninja-build

      - name: Setup Ninja Mac
        if: matrix.os == 'macOS-latest'
        run: brew install ninja

      # Build LLVM if we didn't hit in the cache. Even though we build it in
      # the previous job, there is a low chance that it'll have been evicted by
      # the time we get here.
      - name: Rebuild and Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: utils/build-llvm-publish.sh build ${{ matrix.compiler.mode }} ${{ matrix.compiler.cc }} ${{ matrix.compiler.cxx }}

      # --------
      # Build and test CIRCT
      # --------

      - name: Build and Test CIRCT
        run: |
          mkdir build
          cd build
          cmake -G Ninja .. \
            -DBUILD_SHARED_LIBS=${{ matrix.compiler.shared }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.compiler.mode }} \
            -DLLVM_ENABLE_ASSERTIONS=${{ matrix.compiler.assert }} \
            -DMLIR_DIR=`pwd`/../llvm/build/lib/cmake/mlir \
            -DLLVM_DIR=`pwd`/../llvm/build/lib/cmake/llvm \
            -DLLVM_USE_LINKER=lld \
            -DCMAKE_C_COMPILER=${{ matrix.compiler.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
            -DVERILATOR_DISABLE=ON \
            -DLLVM_ENABLE_TERMINFO=OFF \
            -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
            -DLLVM_PARALLEL_LINK_JOBS=1 \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=OFF
          ninja
      - name: Package Binaries
        run: |
          cd build
          tar -czf circt-bin-${{ matrix.os }}.tar.gz bin 
      - name: Upload Binaries
        uses: skx/github-action-publish-binaries@release-1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: build/circt-bin-${{ matrix.os }}.tar.gz
